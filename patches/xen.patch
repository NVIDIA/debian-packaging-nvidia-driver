diff -ruN usr/src/nv/conftest.sh usr.xen/src/nv/conftest.sh
--- usr/src/nv/conftest.sh	2008-05-19 00:32:05.000000000 -0700
+++ usr.xen/src/nv/conftest.sh	2008-06-03 20:54:18.166467363 -0700
@@ -1249,7 +1249,7 @@
         # the driver doesn't currently work with Xen.
         #
         VERBOSE=$6
-
+        exit 0 ### Debian Packaging Team
         if [ -n "$IGNORE_XEN_PRESENCE" ]; then
             exit 0
         fi
diff -ruN usr/src/nv/nv-linux.h usr.xen/src/nv/nv-linux.h
--- usr/src/nv/nv-linux.h	2008-05-19 00:32:05.000000000 -0700
+++ usr.xen/src/nv/nv-linux.h	2008-06-03 20:58:02.679467442 -0700
@@ -108,11 +108,6 @@
 #include <linux/completion.h>
 #include <linux/highmem.h>
 
-#ifdef CONFIG_XEN
-#include <asm/maddr.h>
-#include <xen/interface/memory.h>
-#endif
-
 #ifdef CONFIG_PROC_FS
 #include <linux/proc_fs.h>
 #endif
@@ -144,7 +139,7 @@
 #include <linux/agpgart.h>
 #endif
 
-#if (defined(NVCPU_X86) || defined(NVCPU_X86_64)) && !defined(CONFIG_XEN)
+#if (defined(NVCPU_X86) || defined(NVCPU_X86_64)) 
 #define NV_BUILD_NV_PAT_SUPPORT 1
 #endif
 
@@ -717,11 +712,7 @@
 #define NV_TASK_STRUCT_RLIM(current)  ((current)->rlim)
 #endif
 
-#ifdef CONFIG_XEN
-#define NV_GET_DMA_ADDRESS(phys_addr) phys_to_machine(phys_addr)
-#else
 #define NV_GET_DMA_ADDRESS(phys_addr) (phys_addr)
-#endif
 
 #define NV_GET_PAGE_STRUCT(phys_page) virt_to_page(__va(phys_page))
 #define NV_VMA_PGOFF(vma)             ((vma)->vm_pgoff)
@@ -874,13 +865,9 @@
 #else
 #error "NV_REMAP_PAGE_RANGE() undefined!"
 #endif
-#if !defined(CONFIG_XEN)
+
 #define NV_IO_REMAP_PAGE_RANGE(from, offset, x...) \
     NV_REMAP_PAGE_RANGE(from, offset, x)
-#else
-#define NV_IO_REMAP_PAGE_RANGE(from, offset, x...) \
-    io_remap_pfn_range(vma, from, ((offset) >> PAGE_SHIFT), x)
-#endif
 
 #define NV_PGD_OFFSET(address, kernel, mm)              \
    ({                                                   \
diff -ruN usr/src/nv/nv.c usr.xen/src/nv/nv.c
--- usr/src/nv/nv.c	2008-05-19 00:32:05.000000000 -0700
+++ usr.xen/src/nv/nv.c	2008-06-03 21:01:10.290467271 -0700
@@ -2020,17 +2020,6 @@
             goto failed;
         }
 
-#if defined(CONFIG_XEN) && defined(NVCPU_X86)
-        if (HYPERVISOR_memory_op(XENMEM_maximum_ram_page, NULL) > 0xfffff)
-        {
-            nv_printf(NV_DBG_ERRORS,
-                "NVRM: Systems with system memory mapped above the 4GB boundary\n"
-                "NVRM: are not supported when using x86 Xen kernels.\n");
-            rc = -EIO;
-            goto failed;
-        }
-#endif
-
         if (!rm_init_adapter(sp, nv))
         {
             free_irq(nv->interrupt_line, (void *) nvl);
@@ -2043,20 +2032,6 @@
         nvl->tasklet.data = (unsigned long) nv;
         tasklet_enable(&nvl->tasklet);
 
-#if defined(CONFIG_XEN)
-        if ((nvl->dev->dma_mask <= 0xffffffff) &&
-            (HYPERVISOR_memory_op(XENMEM_maximum_ram_page, NULL) > 0xfffff))
-        {
-            NV_SHUTDOWN_ADAPTER(sp, nv, nvl);
-            nv_printf(NV_DBG_ERRORS,
-                "NVRM: GPUs incapable of addressing more than 4GB of memory\n"
-                "NVRM: are not supported when using Xen kernels on systems with\n"
-                "NVRM: system memory mapped above the 4GB boundary.\n");
-            rc = -EIO;
-            goto failed;
-        }
-#endif
-
         nv->flags |= NV_FLAG_OPEN;
     }
 
@@ -3928,7 +3903,6 @@
     U032         config
 )
 {
-#if !defined(CONFIG_XEN)
     RM_STATUS status = RM_ERROR;
     static int old_error = 0;
     nv_stack_t *sp = NULL;
@@ -4066,10 +4040,6 @@
         old_error = 0; /* report new errors */
 
     return status;
-#else
-    nv_printf(NV_DBG_ERRORS, "NVRM: AGP is not supported on Xen kernels.\n");
-    return RM_ERR_NOT_SUPPORTED;
-#endif
 }
 
 RM_STATUS NV_API_CALL nv_agp_teardown(
diff -ruN usr/src/nv/os-interface.c usr.xen/src/nv/os-interface.c
--- usr/src/nv/os-interface.c	2008-05-19 00:32:05.000000000 -0700
+++ usr.xen/src/nv/os-interface.c	2008-06-03 21:03:03.798469374 -0700
@@ -609,7 +609,6 @@
     if (jiffies) 
     {
         // if we have at least 1 full jiffy to wait, give up the cpu
-#if !defined(CONFIG_XEN)
         // but first, make sure we haven't raised the irql level on
         // this cpu (most likely holding a lock). I'm seeing cases
         // where we give up the cpu with raised irql, and never get
@@ -620,10 +619,9 @@
         // the local CPU.
         if (!NV_IRQL_IS_RAISED())
         {
-#endif
+
             /* give up the cpu */
             current->state = TASK_INTERRUPTIBLE;
-#if !defined(CONFIG_XEN)
         }
         else
         {
@@ -633,7 +631,6 @@
             os_dbg_breakpoint();
             return RM_ERROR;
         }
-#endif
         do
         {
             schedule_timeout(jiffies);
@@ -1377,7 +1374,7 @@
      * If you prefer to manually grant the necessary capability and 
      * adjust the resource limit, disable the lines below.
      */
-#if !defined(CONFIG_XEN) && !defined(CONFIG_X86_4G)
+#if !defined(CONFIG_X86_4G)
     struct rlimit *rlim = NV_TASK_STRUCT_RLIM(current);
     rlim[RLIMIT_MEMLOCK].rlim_cur = RLIM_INFINITY;
     cap_raise(current->cap_effective, CAP_IPC_LOCK);
