#!/usr/bin/make -f
# Sample debian/rules that uses debhelper.
# GNU copyright 1997 to 1999 by Joey Hess.
#
# Modified to make a template file for a multi-binary package with separated
# build-arch and build-indep targets  by Bill Allombert 2001

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

# This has to be exported to make some magic below work.
export DH_OPTIONS

DEB_HOST_GNU_TYPE   ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
DEB_BUILD_ARCH      ?= $(shell dpkg-architecture -qDEB_BUILD_ARCH)

version:=$(shell sh debian/upstream_info VERSION)
url_x86			:= $(shell sh debian/upstream_info URL_X86)
url_x86_64		:= $(shell sh debian/upstream_info URL_X86_64)
dirname			 = NVIDIA-Linux
filename_x86:=$(shell sh debian/upstream_info FILENAME_X86)
filename_x86_64:=$(shell sh debian/upstream_info FILENAME_X86_64)
dirname_x86:=$(shell sh debian/upstream_info DIRNAME_X86)
dirname_x86_64:=$(shell sh debian/upstream_info DIRNAME_X86_64)

AUTOGEN		 = $(AUTOKEEP) $(AUTOCLEAN)
AUTOKEEP	 = debian/copyright
AUTOCLEAN	 = \
debian/nvidia-glx.install \
debian/nvidia-glx.links \
debian/nvidia-glx.init \
debian/nvidia-glx.postrm \
debian/nvidia-glx-ia32.install \
debian/nvidia-glx-ia32.links \
debian/nvidia-glx-dev.install \
debian/nvidia-kernel-source.README.Debian \
debian/libcuda1.install \
debian/libcuda1.links \
debian/libcuda1-ia32.install \
debian/libcuda1-ia32.links \
debian/libcuda1-ia32.symbols \
debian/nvidia-libvdpau-dev.install \
debian/nvidia-libvdpau1.install \
debian/nvidia-libvdpau1.links \
debian/nvidia-libvdpau1-ia32.install \
debian/nvidia-libvdpau1-ia32.links \
debian/nvidia-libvdpau1-ia32.symbols \
debian/nvidia-vdpau-driver.install \
debian/nvidia-vdpau-driver.links \
debian/nvidia-vdpau-driver-ia32.install \
debian/nvidia-vdpau-driver-ia32.links \
debian.binary/control.template \
debian.binary/changelog


.PHONY: configure
configure: $(AUTOGEN) unpack-stamp

unpack-stamp: ${filename_x86} ${filename_x86_64}
	dh_testdir
	# extract both so we can fetch the kernel object code for both arches
	sh ${filename_x86} --extract-only
	sh ${filename_x86_64} --extract-only
	ln -s ${dirname_x86} NVIDIA-Linux-i386
	ln -s ${dirname_x86_64} NVIDIA-Linux-amd64
	ln -s NVIDIA-Linux-$(DEB_BUILD_ARCH) NVIDIA-Linux
	ls -al
	touch $@


.PHONY: build
build: configure module-source-stamp

# build kernel module source tarball
module-source-stamp: configure
	dh_testdir

	rm -rf debian/temp
	mkdir -p debian/temp/modules/nvidia-kernel/debian

	# Module source code
	cp -a NVIDIA-Linux/usr/src/nv/* debian/temp/modules/nvidia-kernel/
	cp -a NVIDIA-Linux/usr/share/doc/NVIDIA_Changelog debian/temp/modules/nvidia-kernel/

	# We don't want this makefile that doesn't work with kbuild
	rm debian/temp/modules/nvidia-kernel/makefile

	# We want both 32 and 64 bit versions of nv-kernel.o
	cp -a NVIDIA-Linux-i386/usr/src/nv/nv-kernel.o debian/temp/modules/nvidia-kernel/nv-kernel.o.i386
	cp -a NVIDIA-Linux-amd64/usr/src/nv/nv-kernel.o debian/temp/modules/nvidia-kernel/nv-kernel.o.x86_64
	rm -f debian/temp/modules/nvidia-kernel/nv-kernel.o

	# and then make Makefile.kbuild actually use our names
	sed -i -e 's/nv-kernel.o$$/nv-kernel.o$$(NVARCH)/' debian/temp/modules/nvidia-kernel/Makefile.kbuild

	# We have new conftest files that work purely with kbuild and don't require root
	cp -a Makefile conftest.* patches.h debian/temp/modules/nvidia-kernel/

	# Prepare debian files for module package
	cp -a debian.binary/* debian/temp/modules/nvidia-kernel/debian/
	cp -a debian/copyright debian/temp/modules/nvidia-kernel/debian/

	# Fix permissions
	chmod -R a-sx,u=rwX,go=rX debian/temp/modules
	chmod a+x debian/temp/modules/nvidia-kernel/debian/rules

	tar cfvj nvidia-kernel.tar.bz2 -C debian/temp --owner=root --group=src \
		--exclude '*.in' --exclude '.svn' modules
	tar tfvj nvidia-kernel.tar.bz2
	rm -rf debian/temp
	touch $@


.PHONY: clean					
clean:
	dh_testdir
	dh_testroot
	rm -f unpack-stamp module-source-stamp
	dh_clean 

	rm -f NVIDIA-Linux NVIDIA-Linux-i386 NVIDIA-Linux-amd64
	rm -fr $(dirname_x86) $(dirname_x86_64)  nvidia-kernel.tar.bz2
	rm -fr debian/temp

	rm -f $(AUTOCLEAN)
	$(MAKE) -f debian/rules $(AUTOKEEP)


.PHONY: install
install: build
	dh_testdir
	dh_testroot
	dh_prep 
	dh_installdirs 
	dh_install -s
	dh_lintian
	dh_bugfiles


# Must not depend on anything. This is to be called by
# binary-arch/binary-multi in another 'make' thread.
#
# Do not run dh_strip here.  The NVIDIA license says:
#
#     2.1.2 Linux/FreeBSD Exception.  Notwithstanding the foregoing terms of
#     Section 2.1.1, SOFTWARE designed exclusively for use on the Linux or
#     FreeBSD operating systems, or other operating systems derived from the
#     source code to these operating systems, may be copied and
#     redistributed, provided that the binary files thereof are not modified
#     in any way (except for unzipping of compressed files).
#
# Stripping the binary modules would constitute modifying the binary files
# in a way other than unzipping of compressed files.
.PHONY: binary-common
binary-common:
	dh_testdir
	dh_testroot
	dh_installchangelogs $(CURDIR)/$(dirname)/usr/share/doc/NVIDIA_Changelog
	dh_installdocs -s 
	dh_installexamples
#	dh_installmenu
	dh_installdebconf
#	dh_installlogrotate
#	dh_installemacsen
#	dh_installpam
#	dh_installmime
	dh_installinit -- start 20 2 3 4 5 .
#	dh_installcron
#	dh_installinfo
	dh_installman
	dh_link
	dh_compress -s -X.h -X README.Debian 
	dh_fixperms
#	dh_perl
#	dh_python
	dh_makeshlibs -s
	dh_installdeb
	dh_shlibdeps
	dh_gencontrol -s -- -V'nvidia:Version=$(version)'
	dh_md5sums
	dh_builddeb -s


# Generating control files
%:	%.in debian/upstream_info
	perl -p \
	-e 's{#VERSION#}{$(version)}g;' \
	-e 's{#URL_X86#}{$(url_x86)}g;' \
	-e 's{#URL_X86_64#}{$(url_x86_64)}g;' \
	< $< > $@

debian.binary/changelog: debian/changelog
	sed 's/^nvidia-graphics-drivers/nvidia-kernel/g' $< > $@

debian/nvidia-libvdpau1-ia32.symbols: debian/nvidia-libvdpau1.symbols.i386
	sed 's/nvidia-libvdpau1/nvidia-libvdpau1-ia32/g' $< > $@

debian/libcuda1-ia32.symbols: debian/libcuda1.symbols
	sed 's/libcuda1/libcuda1-ia32/g' $< > $@


# Build architecture dependant packages using the common target.
.PHONY: binary-arch
binary-arch: install
	$(MAKE) -f debian/rules binary-common

.PHONY: binary
binary: binary-arch

.PHONY: autogen
autogen: ${AUTOGEN}
