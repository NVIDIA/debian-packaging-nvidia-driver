#!/usr/bin/make -f
# Sample debian/rules that uses debhelper.
# GNU copyright 1997 to 1999 by Joey Hess.
#
# Modified to make a template file for a multi-binary package with separated
# build-arch and build-indep targets  by Bill Allombert 2001

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

# This has to be exported to make some magic below work.
export DH_OPTIONS

DEB_HOST_GNU_TYPE   ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)

base_version:=$(shell sh debian/upstream_info BASE_VERSION)
release:=$(shell sh debian/upstream_info RELEASE)
version:=$(shell sh debian/upstream_info VERSION)
nextver:=$(shell sh debian/upstream_info NEXTVER)
upstreamversion:=$(shell sh debian/upstream_info UPSTREAMVERSION)
url:=$(shell sh debian/upstream_info URL)
dirname:=$(shell sh debian/upstream_info DIRNAME)
filename:=$(shell sh debian/upstream_info FILENAME)
filename_x86:=$(shell sh debian/upstream_info FILENAME_X86)
filename_x86_64:=$(shell sh debian/upstream_info FILENAME_X86_64)
dirname_x86:=$(shell sh debian/upstream_info DIRNAME_X86)
dirname_x86_64:=$(shell sh debian/upstream_info DIRNAME_X86_64)

AUTOGEN		 = $(AUTOKEEP) $(AUTOCLEAN)
AUTOKEEP	 = debian/copyright
AUTOCLEAN	 = \
debian/nvidia-kernel-source.README.Debian \
debian/nvidia-glx.links \
debian/nvidia-glx.docs debian/nvidia-glx.examples \
debian/nvidia-libvdpau1.links debian/nvidia-libvdpau1.docs \
debian/nvidia-glx.postrm debian/nvidia-glx.init \
debian/nvidia-glx-ia32.links \
debian/nvidia-libvdpau1-ia32.links \
debian/nvidia-kernel-source.docs debian/nvidia-glx-dev.preinst \
debian/libcuda1.install debian/libcuda1-ia32.install debian/libcuda1-dev.install \
debian/libcuda1.links debian/libcuda1-ia32.links \
debian/libcuda1-ia32.symbols \
debian/nvidia-libvdpau1-ia32.symbols \
debian/nvidia-vdpau-driver.docs \
debian/nvidia-vdpau-driver-ia32.links \
debian/nvidia-vdpau-driver.links \
debian/nvidia-vdpau-driver-ia32.docs \
debian.binary/changelog


CFLAGS = -Wall -g

ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	CFLAGS += -O0
else
	CFLAGS += -O2
endif
ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
	INSTALL_PROGRAM += -s
endif

version-change: version-clean $(AUTOGEN) clean

configure: configure-stamp

.PHONY: configure-stamp
configure-stamp: version-clean $(AUTOGEN) ${filename_x86} ${filename_x86_64}
	dh_testdir
	# extract both so we can fetch the kernel object code for both arches
	./${filename_x86} --extract-only
	./${filename_x86_64} --extract-only
	if test -d $(CURDIR)/patches; \
	then \
		pwd; \
		ls -al; \
		cd $(dirname)/usr/src/nv; \
#		for i in $(CURDIR)/patches/*; \
#			do patch -p3 <$$i; \
#		done; \
	fi

	touch configure-stamp


.PHONY: build
build: configure-stamp build-stamp

.PHONY: build-stamp
build-stamp:
	    touch build-stamp

.PHONY: build-kernel
build-kernel:

.PHONY: build-kernel-stamp 
build-kernel-stamp: debian.binary/changelog
	    dh_testroot
	    dh_testdir

	    # build kernel module source tarball
	    mkdir -p $(CURDIR)/debian/temp/modules/nvidia-kernel/debian
	    
		# Prepare debian files for module package
	    cp -a $(CURDIR)/debian.binary/* $(CURDIR)/debian/temp/modules/nvidia-kernel/debian
	    for f in `ls $(CURDIR)/debian.binary` ; do \
	       if [ -f $(CURDIR)/debian.binary/$$f ]; then \
		perl -p \
	        -e 's{#BASE_VERSION#}{$(base_version)}g;' \
		-e 's{#RELEASE#}{$(release)}g;' \
		-e 's{#VERSION#}{$(version)}g;' \
		-e 's{#UPSTREAMVERSION#}{$(upstreamversion)}g;' \
		-e 's{#URL#}{$(url)}g' \
		< $(CURDIR)/debian.binary/$$f >		$(CURDIR)/debian/temp/modules/nvidia-kernel/debian/$$f ; \
		chmod 0644 $(CURDIR)/debian/temp/modules/nvidia-kernel/debian/$$f ; \
	      fi \
	    done
	cp -a debian/copyright $(CURDIR)/debian/temp/modules/nvidia-kernel/debian

#	    chmod 775 $(CURDIR)/debian/temp/modules/nvidia-kernel/debian/patches
	    cp $(CURDIR)/$(dirname)/usr/src/nv/* $(CURDIR)/debian/temp/modules/nvidia-kernel/
	cp -a $(CURDIR)/$(dirname)/usr/share/doc/NVIDIA_Changelog $(CURDIR)/debian/temp/modules/nvidia-kernel/

		# We don't want these makefiles that don't work with kbuild
		rm $(CURDIR)/debian/temp/modules/nvidia-kernel/makefile

		# We want both 32 and 64 bit versions of nv-kernel.o
	cp $(CURDIR)/$(dirname_x86)/usr/src/nv/nv-kernel.o $(CURDIR)/debian/temp/modules/nvidia-kernel/nv-kernel.o.i386
	cp $(CURDIR)/$(dirname_x86_64)/usr/src/nv/nv-kernel.o $(CURDIR)/debian/temp/modules/nvidia-kernel/nv-kernel.o.x86_64
	rm -f $(CURDIR)/debian/temp/modules/nvidia-kernel/nv-kernel.o

		# and then make Makefile.kbuild actually use our names
		sed -i -e 's/nv-kernel.o$$/nv-kernel.o$$(NVARCH)/' $(CURDIR)/debian/temp/modules/nvidia-kernel/Makefile.kbuild

		# We have new conftest files that work purely with kbuild and doesn't require root
	    cp $(CURDIR)/Makefile $(CURDIR)/conftest.* $(CURDIR)/debian/temp/modules/nvidia-kernel/
	    cp $(CURDIR)/patches.h $(CURDIR)/debian/temp/modules/nvidia-kernel/

		# Fix permissions
	    chmod 755 $(CURDIR)/debian/temp/modules/nvidia-kernel/debian/rules
	    chown -R root:src $(CURDIR)/debian/temp/modules
	    
	    tar -jcvf $(CURDIR)/nvidia-kernel.tar.bz2 -C $(CURDIR)/debian/temp modules
	    rm -rf debian/temp 
	    touch build-kernel-stamp

.PHONY: clean					
clean: version-clean
	dh_testdir
	dh_testroot
	rm -f build-stamp build-kernel-stamp configure-stamp
	dh_clean 

	rm -fr $(dirname_x86) $(dirname_x86_64)  nvidia-kernel.tar.bz2
	rm -fr debian/temp

	$(MAKE) -f debian/rules $(AUTOKEEP)


.PHONY: install
install: build-stamp build-kernel-stamp
	dh_testdir
	dh_testroot
	dh_prep 
	dh_installdirs 

	install -m 0644 $(CURDIR)/nvidia-kernel.tar.bz2 $(CURDIR)/debian/nvidia-kernel-source/usr/src


	install $(dirname)/usr/X11R6/lib/modules/drivers/nvidia_drv.so \
		$(CURDIR)/debian/nvidia-glx/usr/lib/xorg/modules/drivers



	install -m 0644 $(dirname)/usr/X11R6/lib/libXvMCNVIDIA.a $(CURDIR)/debian/nvidia-glx-dev/usr/lib/libXvMCNVIDIA.a;
	install $(dirname)/usr/X11R6/lib/libXvMCNVIDIA.so.${version} $(CURDIR)/debian/nvidia-glx/usr/lib/libXvMCNVIDIA.so.${version};




	install -m 0644 $(dirname)/usr/include/GL/gl.h \
		$(CURDIR)/debian/nvidia-glx-dev/usr/include/GL
	install -m 0644 $(dirname)/usr/include/GL/glext.h \
		$(CURDIR)/debian/nvidia-glx-dev/usr/include/GL

	install -m 0644 $(dirname)/usr/include/vdpau/vdpau.h \
		$(CURDIR)/debian/nvidia-libvdpau-dev/usr/include/vdpau
	install -m 0644 $(dirname)/usr/include/vdpau/vdpau_x11.h \
		$(CURDIR)/debian/nvidia-libvdpau-dev/usr/include/vdpau

	install -m 0644 $(dirname)/usr/include/GL/glx.h \
		$(CURDIR)/debian/nvidia-glx-dev/usr/include/GL
	install -m 0644 $(dirname)/usr/include/GL/glxext.h \
		$(CURDIR)/debian/nvidia-glx-dev/usr/include/GL

	install $(dirname)/usr/lib/libGL.so.${version} \
			$(CURDIR)/debian/nvidia-glx/usr/lib
	install $(dirname)/usr/lib/libGLcore.so.${version} \
		$(CURDIR)/debian/nvidia-glx/usr/lib
	install $(dirname)/usr/lib/vdpau/libvdpau_nvidia.so.${version} \
			$(CURDIR)/debian/nvidia-vdpau-driver/usr/lib/vdpau
	install $(dirname)/usr/lib/libvdpau.so.${version} \
			$(CURDIR)/debian/nvidia-libvdpau1/usr/lib
	install $(dirname)/usr/lib/vdpau/libvdpau_trace.so.${version} \
			$(CURDIR)/debian/nvidia-libvdpau1/usr/lib/vdpau
			


	sed "s/__GENERATED_BY__/Debian nvidia-graphics-drivers/" $(dirname)/usr/lib/libGL.la | sed "s/__LIBGL_PATH__/\/usr\/lib/" > $(CURDIR)/debian/nvidia-glx-dev/usr/lib/libGL.la
	# install -m 0644 $(dirname)/usr/lib/libGL.la $(CURDIR)/debian/nvidia-glx/usr/lib/libGL.la

	# TLS (nvidia-tls new for 6106)
	#install $(dirname)/usr/lib/libnvidia-tls.so.${version} $(CURDIR)/debian/nvidia-glx/usr/lib/
	install $(dirname)/usr/lib/tls/libnvidia-tls.so.${version} $(CURDIR)/debian/nvidia-glx/usr/lib/

	#install $(dirname)/usr/lib/tls/libnvidia-tls.so.${version} $(CURDIR)/debian/nvidia-glx/usr/lib/nvidia
	install $(dirname)/usr/lib/tls/libnvidia-tls.so.${version} $(CURDIR)/debian/nvidia-glx/usr/lib/tls/
		

	#sed "s/__GENERATED_BY__/Debian nvidia-graphics-drivers/" $(dirname)/usr/lib/tls/libGL.la | sed "s/__LIBGL_PATH__/\/usr\/lib\/tls/" > $(CURDIR)/debian/nvidia-glx-dev/usr/lib/nvidia/libGL.la
	# install -m 0644 $(dirname)/usr/lib/tls/libGL.la $(CURDIR)/debian/nvidia-glx/usr/lib/nvidia/libGL.la
	
	install $(dirname)/usr/lib/libnvidia-cfg.so.${version} $(CURDIR)/debian/nvidia-glx/usr/lib/


	install $(dirname)/usr/X11R6/lib/modules/extensions/libglx.so.${version} $(CURDIR)/debian/nvidia-glx/usr/lib/xorg/modules/extensions/
#	install $(dirname)/usr/X11R6/lib/modules/libnvidia-wfb.so.${version} $(CURDIR)/debian/nvidia-glx/usr/lib/xorg/modules/

	if [ "$(DEB_BUILD_ARCH)" = "amd64" ] ; then \
		install -D $(dirname)/usr/lib32/libGLcore.so.${version} \
			$(CURDIR)/debian/nvidia-glx-ia32/usr/lib32 ; \
		install -D $(dirname)/usr/lib32/libGL.so.${version} \
			$(CURDIR)/debian/nvidia-glx-ia32/usr/lib32 ; \
		install -D $(dirname)/usr/lib32/libvdpau.so.${version} \
			$(CURDIR)/debian/nvidia-libvdpau1-ia32/usr/lib32 ; \
		install -D $(dirname)/usr/lib32/vdpau/libvdpau_nvidia.so.${version} \
			$(CURDIR)/debian/nvidia-vdpau-driver-ia32/usr/lib32/vdpau ; \
		install -D $(dirname)/usr/lib32/vdpau/libvdpau_trace.so.${version} \
			$(CURDIR)/debian/nvidia-libvdpau1-ia32/usr/lib32/vdpau ; \
		install -D $(dirname)/usr/lib32/libnvidia-tls.so.${version} \
			$(CURDIR)/debian/nvidia-glx-ia32/usr/lib32 ; \
		install -D $(dirname)/usr/lib32/tls/libnvidia-tls.so.${version} \
			$(CURDIR)/debian/nvidia-glx-ia32/usr/lib32/tls ; \
	fi

	install $(dirname)/usr/bin/nvidia-bug-report.sh $(CURDIR)/debian/nvidia-glx/usr/bin/
	# use separate package
	#install -m 755 $(dirname)/usr/bin/nvidia-xconfig $(CURDIR)/debian/nvidia-glx/usr/bin/

	# use separate source package instead
	#install -m 755 $(dirname)/usr/bin/nvidia-settings $(CURDIR)/debian/nvidia-settings/usr/bin/
	#install -m 644 $(dirname)/usr/share/doc/nvidia-settings-user-guide.txt $(CURDIR)/debian/nvidia-settings/usr/share/doc/nvidia-settings

	dh_install -s
	dh_lintian
	dh_bugfiles


# Must not depend on anything. This is to be called by
# binary-arch/binary-multi in another 'make' thread.
#
# Do not run dh_strip here.  The NVIDIA license says:
#
#     2.1.2 Linux/FreeBSD Exception.  Notwithstanding the foregoing terms of
#     Section 2.1.1, SOFTWARE designed exclusively for use on the Linux or
#     FreeBSD operating systems, or other operating systems derived from the
#     source code to these operating systems, may be copied and
#     redistributed, provided that the binary files thereof are not modified
#     in any way (except for unzipping of compressed files).
#
# Stripping the binary modules would constitute modifying the binary files
# in a way other than unzipping of compressed files.
.PHONY: binary-common
binary-common:
	dh_testdir
	dh_testroot
	dh_installchangelogs $(CURDIR)/$(dirname)/usr/share/doc/NVIDIA_Changelog
	dh_installdocs -s 
	dh_installexamples
#	dh_installmenu
	dh_installdebconf
#	dh_installlogrotate
#	dh_installemacsen
#	dh_installpam
#	dh_installmime
	dh_installinit -- start 20 2 3 4 5 .
#	dh_installcron
#	dh_installinfo
	dh_installman
	dh_link
	dh_compress -s -X.h -X README.Debian 
	dh_fixperms
#	dh_perl
#	dh_python
	dh_makeshlibs -s
	dh_installdeb
	dh_shlibdeps
	dh_gencontrol -s -- -V'nvidia:Version=$(version)'
	dh_md5sums
	dh_builddeb -s


# Generating control files
%:	%.in debian/upstream_info
	perl -p \
	-e 's{#BASE_VERSION#}{$(base_version)}g;' \
	-e 's{#RELEASE#}{$(release)}g;' \
	-e 's{#VERSION#}{$(version)}g;' \
	-e 's{#NEXTVER#}{$(nextver)}g;' \
	-e 's{#UPSTREAMVERSION#}{$(upstreamversion)}g;' \
	-e 's{#DIRNAME#}{$(dirname)}g;' \
	-e 's{#FILENAME#}{$(filename)}g;' \
	-e 's{#URL#}{$(url)}g' \
	< $< > $@

debian.binary/changelog: debian/changelog
	sed 's/^nvidia-graphics-drivers/nvidia-kernel/g' $< > $@

debian/nvidia-libvdpau1-ia32.symbols: debian/nvidia-libvdpau1.symbols.i386
	sed 's/nvidia-libvdpau1/nvidia-libvdpau1-ia32/g' $< > $@

debian/libcuda1-ia32.symbols: debian/libcuda1.symbols
	sed 's/libcuda1/libcuda1-ia32/g' $< > $@


# Build architecture dependant packages using the common target.
.PHONY: binary-arch
binary-arch: build-stamp build-kernel-stamp install
	$(MAKE) -f debian/rules binary-common

.PHONY: binary
binary: binary-arch

.PHONY: version-clean
version-clean: 
	rm -f ${AUTOCLEAN} || true

.PHONY: autogen
autogen: ${AUTOGEN}
