#!/usr/bin/make -f

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

DEB_BUILD_ARCH		?= $(shell dpkg-architecture -qDEB_BUILD_ARCH)

include debian/rules.defs
version			 = $(NVIDIA_RELEASE)
legacy			 = $(NVIDIA_LEGACY)
url_x86			 = $(NVIDIA_URL_X86)
url_x86_64		 = $(NVIDIA_URL_X86_64)
filename_x86		 = $(NVIDIA_FILENAME_X86)
filename_x86_64		 = $(NVIDIA_FILENAME_X86_64)
dirname_x86		 = $(NVIDIA_DIRNAME_X86)
dirname_x86_64		 = $(NVIDIA_DIRNAME_X86_64)

TEMPLATES	:= $(wildcard debian/*.in)
AUTOGEN		+= $(patsubst %.in,%,$(TEMPLATES))
AUTOGEN		+= debian/libcuda1-ia32.symbols
AUTOGEN		+= debian/module/debian/control.template
AUTOGEN		+= debian/module/debian/changelog
AUTOKEEP	 = debian/copyright
AUTOCLEAN	 = $(filter-out $(AUTOKEEP),$(AUTOGEN))

module_source	 = debian/nvidia-kernel-source/usr/src/modules/nvidia-kernel
module_tbz	 = $(subst /modules/,/,$(module_source)).tar.bz2
dkms_source	 = debian/nvidia-kernel-dkms/usr/src/nvidia-$(version)

.PHONY: autogen configure
autogen: $(AUTOGEN)
configure: autogen unpack-stamp


unpack-stamp: ${filename_x86} ${filename_x86_64}
	dh_testdir
	# extract both so we can fetch the kernel object code for both arches
	sh ${filename_x86} --extract-only
	sh ${filename_x86_64} --extract-only
	ln -s ${dirname_x86} NVIDIA-Linux-i386
	ln -s ${dirname_x86_64} NVIDIA-Linux-amd64
	ln -s NVIDIA-Linux-$(DEB_BUILD_ARCH) NVIDIA-Linux
	ls -al
	touch $@


.PHONY: binary binary-arch binary-indep build clean install
binary binary-arch binary-indep build clean install:
	dh $@

override_dh_auto_clean:
	rm -f NVIDIA-Linux NVIDIA-Linux-i386 NVIDIA-Linux-amd64
	rm -fr $(dirname_x86) $(dirname_x86_64)
	rm -fr debian/temp

override_dh_clean:
	dh_clean
	rm -f $(AUTOCLEAN)
	$(MAKE) -f debian/rules $(AUTOKEEP)

override_dh_auto_configure: configure

# Build two kernel module source tarballs for use with
#  - module-assistant and make-kpkg
#  - dkms
override_dh_auto_install:
	mkdir -p $(module_source)
	cp -a NVIDIA-Linux/usr/src/nv/* $(module_source)/
	cp -a NVIDIA-Linux/usr/share/doc/NVIDIA_Changelog $(module_source)/

	# We don't want these makefiles that don't work with kbuild.
	rm $(module_source)/makefile
	rm $(module_source)/Makefile.nvidia

	# We want both 32 and 64 bit versions of nv-kernel.o.  Do not use a
	# name matching *.o to prevent accidental deletion by some clean
	# target.
	cp -a NVIDIA-Linux-i386/usr/src/nv/nv-kernel.o \
	    $(module_source)/nv-kernel.o.i386
	cp -a NVIDIA-Linux-amd64/usr/src/nv/nv-kernel.o \
	    $(module_source)/nv-kernel.o.x86_64
	rm -f $(module_source)/nv-kernel.o

	# Install a debian/ tree and new conftest files that work purely
	# with kbuild and don't require root into the module package.
	cp -a debian/module/* $(module_source)/
	cp -a debian/copyright $(module_source)/debian/
	cp -a debian/bug-script $(module_source)/debian/
	cp -a debian/bug-control $(module_source)/debian/

	# Fix permissions.
	chmod -R a-sx,u=rwX,go=rX $(module_source)/../..
	chmod a+x $(module_source)/debian/rules
	chmod a+x $(module_source)/conftest.sh

	# Build the tarball.
	tar cfj $(module_tbz) \
	    --owner=root --group=src -C $(module_source)/../.. \
	    --exclude '*.in' --exclude '.svn' modules
	tar tfvj $(module_tbz)

	# Use the nvidia-kernel-source source to create the DKMS tree.
	mkdir -p $(dir $(dkms_source))
	mv $(module_source) $(dkms_source)
	rmdir $(dir $(module_source))
	cd $(dkms_source) \
	    && QUILT_PATCHES=debian/patches quilt --quiltrc /dev/null push -a \
	    && rm -rf .pc debian
	ls -la $(dkms_source)
	dh_dkms -V $(version)

override_dh_installchangelogs:
	dh_installchangelogs NVIDIA-Linux/usr/share/doc/NVIDIA_Changelog

override_dh_installinit:
	dh_installinit -- start 20 2 3 4 5 .

override_dh_bugfiles:
	dh_bugfiles -A

override_dh_gencontrol:
	dh_gencontrol -- -V'nvidia:Version=$(version)' -V'nvidia:Legacy=$(legacy)' \
		-V'nvidia:LegacyDesc=$(if $(legacy), ($(subst -legacy-,,$(legacy)) legacy version))'

# Do not run dh_strip here.  The NVIDIA license says:
#
#     2.1.2 Linux/FreeBSD Exception.  Notwithstanding the foregoing terms of
#     Section 2.1.1, SOFTWARE designed exclusively for use on the Linux or
#     FreeBSD operating systems, or other operating systems derived from the
#     source code to these operating systems, may be copied and
#     redistributed, provided that the binary files thereof are not modified
#     in any way (except for unzipping of compressed files).
#
# Stripping the binary modules would constitute modifying the binary files
# in a way other than unzipping of compressed files.
override_dh_strip:
	# running dh_strip is not permitted by the NVIDIA license


# Generating control files
%:	%.in debian/rules.defs
	perl -p \
	-e 's{#VERSION#}{$(version)}g;' \
	-e 's{#LEGACY#}{$(legacy)}g;' \
	-e 's{#URL_X86#}{$(url_x86)}g;' \
	-e 's{#URL_X86_64#}{$(url_x86_64)}g;' \
	< $< > $@

debian/module/debian/changelog: debian/changelog
	sed 's/^nvidia-graphics-drivers/nvidia-kernel/g' $< > $@

debian/libcuda1-ia32.symbols: debian/libcuda1.symbols
	sed 's/libcuda1/libcuda1-ia32/g' $< > $@


.PHONY: get-orig-source
get-orig-source:
	rm -rf get-orig-source || true
	mkdir get-orig-source
	uscan --no-symlink --download-current-version --pasv \
	    --destdir get-orig-source
	@set -e -x ; \
	    cd get-orig-source ; \
	    newversion=$$(ls *-x86-*.run | sed -e 's/.*-\([0-9.]*\)-.*/\1/') ; \
	    mkdir nvidia-graphics-drivers-$${newversion}.orig ; \
	    mv *.run nvidia-graphics-drivers-$${newversion}.orig/ ; \
	    chmod 0755 nvidia-graphics-drivers-$${newversion}.orig/* ; \
	    tar cfvz ../nvidia-graphics-drivers_$$newversion.orig.tar.gz \
		--owner=root --group=src \
		nvidia-graphics-drivers-$${newversion}.orig
	rm -rf get-orig-source
