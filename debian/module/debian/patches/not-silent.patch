Author: Andreas Beckmann <anbe@debian.org>
Description: make silent commands in NVIDIA's Makefile.kbuild verbose

--- a/nvidia-modules-common.mk
+++ b/nvidia-modules-common.mk
@@ -137,10 +137,10 @@ MOD_SIGN_CMD ?= $(KERNEL_SOURCES)/script
 #
 
 $(obj)/$(CORE_OBJS):
-	@cp $(src)/$(CORE_OBJS) $(obj)/$(CORE_OBJS)
+	$(NVQ)cp $(src)/$(CORE_OBJS) $(obj)/$(CORE_OBJS)
 
 $(obj)/$(VERSION_HEADER):
-	@echo \#define NV_COMPILER \"`$(CC) -v 2>&1 | tail -n 1`\" > $@
+	$(NVQ)echo \#define NV_COMPILER \"`$(CC) -v 2>&1 | tail -n 1`\" > $@
 
 .PHONY: conftest-verbose
 conftest-verbose:
@@ -163,11 +163,11 @@ $(obj)/conftest.h $(CONFTEST_COMPILE_TES
 
 conftest-compile-test: $(src)/conftest.sh conftest-verbose
 	@echo " CONFTEST: compile_tests"
-	@if ! $(CONFTEST) compile_tests $(COMPILE_TESTS); then exit 1; fi
+	$(NVQ)if ! $(CONFTEST) compile_tests $(COMPILE_TESTS); then exit 1; fi
 
 $(obj)/conftest/patches.h: $(src)/conftest.sh conftest-verbose
 	@echo " CONFTEST: patch_check"
-	@if ! $(CONFTEST) patch_check; then exit 1; fi
+	$(NVQ)if ! $(CONFTEST) patch_check; then exit 1; fi
 	@echo " CONFTEST $(notdir $@):"
 	@cat $@
 
@@ -198,10 +198,10 @@ KBUILD_PARAMS += ARCH=$(ARCH)
 #
 
 suser-sanity-check:
-	@if ! $(CONFTEST) suser_sanity_check; then exit 1; fi
+	$(NVQ)$(CONFTEST) suser_sanity_check
 
 rmmod-sanity-check:
-	@if ! $(CONFTEST) rmmod_sanity_check; then exit 1; fi
+	$(NVQ)$(CONFTEST) rmmod_sanity_check
 
 #	cc_version_check \
 
@@ -216,7 +216,7 @@ build-sanity-checks: $(obj)/conftest/san
 
 $(obj)/conftest/sanity-checks.stamp: conftest-verbose
 	@mkdir -p $(obj)/conftest
-	@for SANITY_CHECK in $(BUILD_SANITY_CHECKS); do \
+	$(NVQ)for SANITY_CHECK in $(BUILD_SANITY_CHECKS); do \
 	 echo " CONFTEST: $$SANITY_CHECK"; \
 	 if ! $(CONFTEST) $$SANITY_CHECK full_output; then \
 	 exit 1; \
@@ -246,7 +246,7 @@ define BUILD_MODULE_RULE
 	@echo "NVIDIA: calling KBUILD..."
 	$$(MAKE) NV_MODULE_SUFFIX=$$(strip $(2)) $$(KBUILD_PARAMS) modules
 	@echo "NVIDIA: left KBUILD."
-	@if ! [ -f $(1) ]; then \
+	$$(NVQ)if ! [ -f $(1) ]; then \
 	 echo "$(1) failed to build!"; \
 	 exit 1; \
 	elif [ -f split-object-file.sh ]; then \
@@ -261,7 +261,7 @@ endef
 #
 
 module-sign: $(MODULE_OBJECT)
-	@if [ -z "$(MODSECKEY)" ] || [ -z "$(MODPUBKEY)" ]; then \
+	$(NVQ)if [ -z "$(MODSECKEY)" ] || [ -z "$(MODPUBKEY)" ]; then \
 	 echo "ERROR: MODSECKEY and MODPUBKEY must be set to sign modules!"; \
 	 exit 1; \
 	elif ! [ -f "$(MODSECKEY)" ]; then \
@@ -293,7 +293,7 @@ module-sign: $(MODULE_OBJECT)
 #
 
 module-install: suser-sanity-check module
-	@mkdir -p $(MODULE_ROOT)/video; \
+	$(NVQ)mkdir -p $(MODULE_ROOT)/video; \
 	install -m 0664 -o root -g root $(MODULE_OBJECT) $(MODULE_ROOT)/video; \
 	PATH="$(PATH):/bin:/sbin" depmod -a
 
@@ -303,7 +303,7 @@ module-install: suser-sanity-check modul
 #
 
 package-install: module-install rmmod-sanity-check
-	@PATH="$(PATH):/bin:/sbin" modprobe $(MODULE_NAME) && \
+	$(NVQ)PATH="$(PATH):/bin:/sbin" modprobe $(MODULE_NAME) && \
 	echo "$(MODULE_OBJECT) installed successfully.";
 
 #
@@ -328,20 +328,20 @@ MODULE_COMMON_SCRIPT := $(if $(wildcard
 #
 
 $(KERNEL_GLUE_NAME): $(MODULE_OBJECT)
-	@$(LD) $(EXTRA_LDFLAGS) $(MODULE_COMMON_SCRIPT) -r -o $(KERNEL_GLUE_NAME) $(KERNEL_GLUE_OBJS)
+	$(NVQ)$(LD) $(EXTRA_LDFLAGS) $(MODULE_COMMON_SCRIPT) -r -o $(KERNEL_GLUE_NAME) $(KERNEL_GLUE_OBJS)
 
 #
 # Support hack, KBUILD isn't prepared to clean up after external modules.
 #
 
 clean:
-	@$(RM) -f $(MODULE_GLUE_OBJS) $(KERNEL_GLUE_OBJS)
-	@$(RM) -f build-in.o nv-linux*.o *.d .*.cmd .*.flags
-	@$(RM) -f $(MODULE_NAME)*.o $(MODULE_NAME)*.ko*
-	@$(RM) -f $(MODULE_NAME)*.mod* $(VERSION_HEADER) *~
-	@$(RM) -f conftest*.c conftest.h
-	@$(RM) -rf conftest
-	@$(RM) -rf Module*.symvers .tmp_versions modules.order
+	$(NVQ)$(RM) -f $(MODULE_GLUE_OBJS) $(KERNEL_GLUE_OBJS)
+	$(NVQ)$(RM) -f build-in.o nv-linux*.o *.d .*.cmd .*.flags
+	$(NVQ)$(RM) -f $(MODULE_NAME)*.o $(MODULE_NAME)*.ko*
+	$(NVQ)$(RM) -f $(MODULE_NAME)*.mod* $(VERSION_HEADER) *~
+	$(NVQ)$(RM) -f conftest*.c conftest.h
+	$(NVQ)$(RM) -rf conftest
+	$(NVQ)$(RM) -rf Module*.symvers .tmp_versions modules.order
 
 #
 # This target just prints the kernel module filename (for use by the
