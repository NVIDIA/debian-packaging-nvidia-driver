Author: Andreas Beckmann <anbe@debian.org>
Description: make silent commands in NVIDIA's Makefile.kbuild verbose

--- a/nvidia-modules-common.mk
+++ b/nvidia-modules-common.mk
@@ -142,10 +142,10 @@ MOD_SIGN_CMD ?= $(KERNEL_SOURCES)/script
 #
 
 $(obj)/$(CORE_OBJS):
-	@cp $(src)/$(CORE_OBJS) $(obj)/$(CORE_OBJS)
+	$(NVQ)cp $(src)/$(CORE_OBJS) $(obj)/$(CORE_OBJS)
 
 $(obj)/$(VERSION_HEADER):
-	@echo \#define NV_COMPILER \"`$(CC) -v 2>&1 | tail -n 1`\" > $@
+	$(NVQ)echo \#define NV_COMPILER \"`$(CC) -v 2>&1 | tail -n 1`\" > $@
 
 CONFTEST_COMPILE_TEST_HEADERS := $(obj)/conftest/macros.h \
 $(obj)/conftest/functions.h $(obj)/conftest/symbols.h $(obj)/conftest/types.h \
@@ -161,8 +161,8 @@ $(CONFTEST_COMPILE_TEST_HEADERS)
 #
 
 $(obj)/conftest/compile-tests/%.h: $(src)/conftest.sh $(obj)/conftest/headers.h
-	@mkdir -p $(obj)/conftest/compile-tests
-	@$(CONFTEST) compile_tests '$(CONFTEST_CFLAGS)' $(notdir $*) > $@
+	$(NVQ)mkdir -p $(obj)/conftest/compile-tests
+	$(NVQ)$(CONFTEST) compile_tests '$(CONFTEST_CFLAGS)' $(notdir $*) > $@
 
 #
 # Concatenate a conftest/*.h header from its constituent compile test headers
@@ -173,9 +173,9 @@ $(obj)/conftest/compile-tests/%.h: $(src
 
 define GENERATE_COMPILE_TEST_HEADER
 $(obj)/conftest/$(1).h: $(addprefix $(obj)/conftest/compile-tests/,$(addsuffix .h,$(2)))
-	@mkdir -p $(obj)/conftest
-	@# concatenate /dev/null to prevent cat from hanging when $$^ is empty
-	@cat $$^ /dev/null > $$@
+	$(NVQ)mkdir -p $(obj)/conftest
+	$(NVQ)# concatenate /dev/null to prevent cat from hanging when $$^ is empty
+	$(NVQ)cat $$^ /dev/null > $$@
 endef
 
 #
@@ -190,12 +190,12 @@ $(eval $(call GENERATE_COMPILE_TEST_HEAD
 $(eval $(call GENERATE_COMPILE_TEST_HEADER,types,$(TYPE_COMPILE_TESTS)))
 
 $(obj)/conftest/patches.h: $(src)/conftest.sh
-	@mkdir -p $(obj)/conftest
-	@$(CONFTEST) patch_check > $@
+	$(NVQ)mkdir -p $(obj)/conftest
+	$(NVQ)$(CONFTEST) patch_check > $@
 
 $(obj)/conftest/headers.h: $(src)/conftest.sh
-	@mkdir -p $(obj)/conftest
-	@$(CONFTEST) test_kernel_headers > $@
+	$(NVQ)mkdir -p $(obj)/conftest
+	$(NVQ)$(CONFTEST) test_kernel_headers > $@
 
 $(obj)/nv.o: $(obj)/$(VERSION_HEADER)
 
@@ -220,10 +220,10 @@ KBUILD_PARAMS += ARCH=$(ARCH)
 #
 
 suser-sanity-check:
-	@if ! $(CONFTEST) suser_sanity_check; then exit 1; fi
+	$(NVQ)if ! $(CONFTEST) suser_sanity_check; then exit 1; fi
 
 rmmod-sanity-check:
-	@if ! $(CONFTEST) rmmod_sanity_check; then exit 1; fi
+	$(NVQ)if ! $(CONFTEST) rmmod_sanity_check; then exit 1; fi
 
 BUILD_SANITY_CHECKS = \
 	cc_version_check \
@@ -234,7 +234,7 @@ BUILD_SANITY_CHECKS = \
 	preempt_rt_sanity_check
 
 build-sanity-checks:
-	@for SANITY_CHECK in $(BUILD_SANITY_CHECKS); do \
+	$(NVQ)for SANITY_CHECK in $(BUILD_SANITY_CHECKS); do \
 	 if ! $(CONFTEST) $$SANITY_CHECK full_output; then \
 	 exit 1; \
 	 fi; \
@@ -245,7 +245,7 @@ build-sanity-checks:
 #
 
 module: build-sanity-checks $(CONFTEST_HEADERS)
-	@echo "NVIDIA: calling KBUILD..."; \
+	$(NVQ)echo "NVIDIA: calling KBUILD..."; \
 	$(MAKE) "CC=$(CC)" $(KBUILD_PARAMS) modules; \
 	echo "NVIDIA: left KBUILD."; \
 	for module in $(MODULE_OBJECTS); do \
@@ -263,7 +263,7 @@ module: build-sanity-checks $(CONFTEST_H
 #
 
 module-sign: module
-	@for module in $(MODULE_OBJECTS); do \
+	$(NVQ)for module in $(MODULE_OBJECTS); do \
 	 if [ -z "$(MODSECKEY)" ] || [ -z "$(MODPUBKEY)" ]; then \
 	 echo "ERROR: MODSECKEY and MODPUBKEY must be set to sign modules!"; \
 	 exit 1; \
@@ -296,7 +296,7 @@ module-sign: module
 #
 
 module-install: suser-sanity-check module
-	@mkdir -p $(MODULE_ROOT)/video; \
+	$(NVQ)mkdir -p $(MODULE_ROOT)/video; \
 	install -m 0664 -o root -g root $(MODULE_OBJECTS) $(MODULE_ROOT)/video; \
 	PATH="$(PATH):/bin:/sbin" depmod -a
 
@@ -306,7 +306,7 @@ module-install: suser-sanity-check modul
 #
 
 package-install: module-install rmmod-sanity-check
-	@PATH="$(PATH):/bin:/sbin" modprobe $(BUILD_MODULES_LIST) && \
+	$(NVQ)PATH="$(PATH):/bin:/sbin" modprobe $(BUILD_MODULES_LIST) && \
 	echo "$(MODULE_OBJECTS) installed successfully.";
 
 #
@@ -329,18 +329,18 @@ MODULE_COMMON_SCRIPT := $(if $(wildcard
 #
 
 $(KERNEL_GLUE_NAME): module
-	@$(LD) $(EXTRA_LDFLAGS) $(MODULE_COMMON_SCRIPT) -r -o $(KERNEL_GLUE_NAME) $(KERNEL_GLUE_OBJS)
+	$(NVQ)$(LD) $(EXTRA_LDFLAGS) $(MODULE_COMMON_SCRIPT) -r -o $(KERNEL_GLUE_NAME) $(KERNEL_GLUE_OBJS)
 
 #
 # Support hack, KBUILD isn't prepared to clean up after external modules.
 #
 
 clean:
-	@$(RM) -f $(MODULE_GLUE_OBJS) $(KERNEL_GLUE_OBJS)
-	@$(RM) -f build-in.o nv-linux*.o *.d .*.cmd .*.flags
-	@$(RM) -f $(MODULE_NAME)*.o $(MODULE_NAME)*.ko*
-	@$(RM) -f $(MODULE_NAME)*.mod* $(VERSION_HEADER) *~
-	@$(RM) -f conftest*.c
-	@$(RM) -rf conftest
-	@$(RM) -rf Module*.symvers .tmp_versions modules.order
-	@$(RM) -f nv-instance-*.c nv-instance-*.o
+	$(NVQ)$(RM) -f $(MODULE_GLUE_OBJS) $(KERNEL_GLUE_OBJS)
+	$(NVQ)$(RM) -f build-in.o nv-linux*.o *.d .*.cmd .*.flags
+	$(NVQ)$(RM) -f $(MODULE_NAME)*.o $(MODULE_NAME)*.ko*
+	$(NVQ)$(RM) -f $(MODULE_NAME)*.mod* $(VERSION_HEADER) *~
+	$(NVQ)$(RM) -f conftest*.c
+	$(NVQ)$(RM) -rf conftest
+	$(NVQ)$(RM) -rf Module*.symvers .tmp_versions modules.order
+	$(NVQ)$(RM) -f nv-instance-*.c nv-instance-*.o
