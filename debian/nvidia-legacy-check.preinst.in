#!/bin/sh
set -e

# This script checks whether NVIDIA GPUs that are only supported by a
# previous legacy driver are present in the system.
# Unfortunately, there were several reports that this does not work
# on some systems because lspci hangs. That seems to be a hardware
# dependent issue. See e.g. #819869 for details.
#
# A possible workaround is to reboot with 'acpi=off' added to the
# kernel boot options in the GRUB configuration.
#
# Alternatively this check can be disabled by preseeding:
#   echo "nvidia-driver/check-for-unsupported-gpu boolean false" | debconf-set-selections


. /usr/share/debconf/confmodule

LEGACY_DRIVER="nvidia-legacy-340xx-driver"
LEGACY_PCIIDS="
10DE0191
10DE0193
10DE0194
10DE0197
10DE019D
10DE019E
10DE0400
10DE0401
10DE0402
10DE0403
10DE0404
10DE0405
10DE0406
10DE0407
10DE0408
10DE0409
10DE040A
10DE040B
10DE040C
10DE040D
10DE040E
10DE040F
10DE0410
10DE0420
10DE0421
10DE0422
10DE0423
10DE0424
10DE0425
10DE0426
10DE0427
10DE0428
10DE0429
10DE042A
10DE042B
10DE042C
10DE042D
10DE042E
10DE042F
10DE05E0
10DE05E1
10DE05E2
10DE05E3
10DE05E6
10DE05E7
10DE05EA
10DE05EB
10DE05ED
10DE05F8
10DE05F9
10DE05FD
10DE05FE
10DE05FF
10DE0600
10DE0601
10DE0602
10DE0603
10DE0604
10DE0605
10DE0606
10DE0607
10DE0608
10DE0609
10DE060A
10DE060B
10DE060C
10DE060D
10DE060F
10DE0610
10DE0611
10DE0612
10DE0613
10DE0614
10DE0615
10DE0617
10DE0618
10DE0619
10DE061A
10DE061B
10DE061C
10DE061D
10DE061E
10DE061F
10DE0621
10DE0622
10DE0623
10DE0625
10DE0626
10DE0627
10DE0628
10DE062A
10DE062B
10DE062C
10DE062D
10DE062E
10DE0630
10DE0631
10DE0632
10DE0635
10DE0637
10DE0638
10DE063A
10DE0640
10DE0641
10DE0643
10DE0644
10DE0645
10DE0646
10DE0647
10DE0648
10DE0649
10DE064A
10DE064B
10DE064C
10DE0651
10DE0652
10DE0653
10DE0654
10DE0655
10DE0656
10DE0658
10DE0659
10DE065A
10DE065B
10DE065C
10DE06E0
10DE06E1
10DE06E2
10DE06E3
10DE06E4
10DE06E5
10DE06E6
10DE06E7
10DE06E8
10DE06E9
10DE06EA
10DE06EB
10DE06EC
10DE06EF
10DE06F1
10DE06F8
10DE06F9
10DE06FA
10DE06FB
10DE06FD
10DE06FF
10DE0840
10DE0844
10DE0845
10DE0846
10DE0847
10DE0848
10DE0849
10DE084A
10DE084B
10DE084C
10DE084D
10DE084F
10DE0860
10DE0861
10DE0862
10DE0863
10DE0864
10DE0865
10DE0866
10DE0867
10DE0868
10DE0869
10DE086A
10DE086C
10DE086D
10DE086E
10DE086F
10DE0870
10DE0871
10DE0872
10DE0873
10DE0874
10DE0876
10DE087A
10DE087D
10DE087E
10DE087F
10DE08A0
10DE08A2
10DE08A3
10DE08A4
10DE08A5
10DE0A20
10DE0A22
10DE0A23
10DE0A26
10DE0A27
10DE0A28
10DE0A29
10DE0A2A
10DE0A2B
10DE0A2C
10DE0A2D
10DE0A32
10DE0A34
10DE0A35
10DE0A38
10DE0A3C
10DE0A60
10DE0A62
10DE0A63
10DE0A64
10DE0A65
10DE0A66
10DE0A67
10DE0A68
10DE0A69
10DE0A6A
10DE0A6C
10DE0A6E
10DE0A6F
10DE0A70
10DE0A71
10DE0A72
10DE0A73
10DE0A74
10DE0A75
10DE0A76
10DE0A78
10DE0A7A
10DE0A7C
10DE0CA0
10DE0CA2
10DE0CA3
10DE0CA4
10DE0CA5
10DE0CA7
10DE0CA8
10DE0CA9
10DE0CAC
10DE0CAF
10DE0CB0
10DE0CB1
10DE0CBC
10DE10C0
10DE10C3
10DE10C5
10DE10D8
10DE0FEF
10DE0FF2
10DE11BF
"

if [ "$DEBUG_NVIDIA_LEGACY_CHECK" = "yes" ]; then
	set -x
fi

find_unsupported_gpus()
{
	if [ -n "$OVERRIDE_NVIDIA_LEGACY_CHECK_UNSUPPORTED_DEVICES" ]; then
		echo "$OVERRIDE_NVIDIA_LEGACY_CHECK_UNSUPPORTED_DEVICES"
		return
	fi

	# Check for GPUs that are only supported up to $LEGACY_DRIVER
	if lspci --version > /dev/null 2>&1; then
		lspci -mn \
		| awk '{ gsub("\"",""); if ($2 == "0300") { print $1 " " $3$4 } }' \
		| tr '[:lower:]' '[:upper:]' \
		| while read dev id
		do
			for x in $LEGACY_PCIIDS
			do
				if [ "$x" = "$id" ]; then
					echo "$dev"
					break
				fi
			done
		done
	fi
}


check_for_unsupported_gpus()
{
	# allow to disable the check via preseeding
	db_get nvidia-driver/check-for-unsupported-gpu
	test "$RET" = "true" || return 0

	(
		sleep 30 &
		sleeppid=$!
		trap 'kill $sleeppid 2>/dev/null || true' TERM
		trap ':' EXIT
		wait $sleeppid
		echo "Checking for legacy NVIDIA GPUs appears to hang, try rebooting with 'acpi=off'" >&2
	       	echo "added to the kernel boot options in the GRUB configuration." >&2
	) &
	msgpid=$!

	UNSUPPORTED_DEVICES="$(find_unsupported_gpus)"
	UNSUPPORTED="$(for dev in $UNSUPPORTED_DEVICES ; do lspci -nn -s "$dev" ; done)"

	kill $msgpid 2>/dev/null || true

	test -n "$UNSUPPORTED_DEVICES" || return 0

	db_subst nvidia-driver/install-even-if-unsupported-gpu-exists vendor "NVIDIA"
	db_subst nvidia-driver/install-even-if-unsupported-gpu-exists driver "#NVIDIA#-driver"
	db_subst nvidia-driver/install-even-if-unsupported-gpu-exists legacy_driver "$LEGACY_DRIVER"
	db_subst nvidia-driver/install-even-if-unsupported-gpu-exists free_name "Nouveau"
	db_subst nvidia-driver/install-even-if-unsupported-gpu-exists free_driver "xserver-xorg-video-nouveau"
	db_subst nvidia-driver/install-even-if-unsupported-gpu-exists unsupported-device "$(echo "$UNSUPPORTED" | sed -r 's/$/; /' | tr -d '\n' | sed -r 's/; $//')"

	# ensure the question is asked again unless it was accepted previously for the same $LEGACY_DRIVER
	db_get nvidia-driver/supported-in-legacy-driver-name
	if [ "$RET" != "$LEGACY_DRIVER" ]; then
		db_reset nvidia-driver/install-even-if-unsupported-gpu-exists
		db_fset nvidia-driver/install-even-if-unsupported-gpu-exists seen false
	fi

	db_input high nvidia-driver/install-even-if-unsupported-gpu-exists || true
	db_go

	echo "*** The following unsupported devices are present in the machine:"
	echo "$UNSUPPORTED"

	db_get nvidia-driver/install-even-if-unsupported-gpu-exists
	if [ "$RET" = "false" ]; then
		echo "Aborting nvidia driver installation."
		exit 1
	fi

	# remember the answer until $LEGACY_DRIVER changes
	db_set nvidia-driver/supported-in-legacy-driver-name "$LEGACY_DRIVER"
}


if [ "$1" = "install" ] || [ "$1" = "upgrade" ]; then

	check_for_unsupported_gpus

fi

#DEBHELPER#
